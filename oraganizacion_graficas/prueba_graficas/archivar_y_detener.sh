#!/bin/bash

echo "üõë Deteniendo el sistema y archivando datos..."

# Definir rutas
BASE_DIR=$(dirname "$(realpath "$0")")
CSV_FILE="$BASE_DIR/sensor_data.csv"
BUFFER_FILE="$BASE_DIR/buffer_uart.json"

# **Indicar a `escuchar_uart.py` que debe detenerse**
echo "‚è≥ Enviando se√±al de detenci√≥n a escuchar_uart.py..."
touch "$BASE_DIR/stop_signal.flag"

# **Esperar a que la cola en memoria se vac√≠e**
echo "üì§ Procesando mediciones almacenadas en la cola..."
python "$BASE_DIR/vaciar_cola.py"

# **Esperar hasta que las gr√°ficas se actualicen**
echo "üìä Generando gr√°ficas pendientes..."
python "$BASE_DIR/graficar_pendientes.py"

# **Crear carpeta de backup**
FECHA=$(date +"%Y-%m-%d_%H-%M-%S")
BACKUP_DIR="$BASE_DIR/backup_$FECHA"
mkdir -p "$BACKUP_DIR"

# **Mover archivos a backup**
echo "üìÇ Archivando datos..."
if [ -d "$BASE_DIR/graficas_png" ]; then
    mv "$BASE_DIR/graficas_png" "$BACKUP_DIR/"
    echo "‚úÖ Gr√°ficas PNG archivadas."
fi

if [ -d "$BASE_DIR/graficas_mat" ]; then
    mv "$BASE_DIR/graficas_mat" "$BACKUP_DIR/"
    echo "‚úÖ Datos MAT archivados."
fi

# **Eliminar el CSV despu√©s de archivar los datos**
if [ -f "$CSV_FILE" ]; then
    rm -f "$CSV_FILE"
    echo "üóëÔ∏è Archivo CSV eliminado correctamente."
else
    echo "‚ö†Ô∏è No se encontr√≥ sensor_data.csv."
fi

# **Eliminar buffer si existe**
if [ -f "$BUFFER_FILE" ]; then
    rm -f "$BUFFER_FILE"
    echo "üóëÔ∏è Buffer UART eliminado."
else
    echo "‚ö†Ô∏è No se encontr√≥ buffer_uart.json."
fi

# **Eliminar la se√±al de detenci√≥n**
rm -f "$BASE_DIR/stop_signal.flag"

echo "‚úÖ Sistema detenido y datos archivados correctamente."
exit 0
